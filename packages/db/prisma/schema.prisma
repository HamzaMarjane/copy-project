// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uid                String        @id
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    name               String?
    image              String?
    stripe_customer_id String?
    Credentials        Credentials?
    AuthProvider       AuthProvider?
    Admin              Admin?
    Individual         Individual?
    Member             Member?
    Organization       Organization?
    Profile            Profile?
    Community          Community[]
    Event              Event[]
    Payment            Payment[]
    Ticket             Ticket[]
}

model Profile {
    profile_id String  @id @default(uuid())
    name       String
    bio        String?
    avatar_url String?
    uid        String  @unique

    user User @relation(fields: [uid], references: [uid])

    @@map("profiles") // Rename the table to profiles
}

model Admin {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])
}

model Member {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])
}

model Individual {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])
}

model Organization {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])
}

model Credentials {
    uid          String   @id
    email        String   @unique
    user         User     @relation(fields: [uid], references: [uid])
    passwordHash String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model AuthProvider {
    uid String @id

    type AuthProviderType
    user User             @relation(fields: [uid], references: [uid])
}

enum AuthProviderType {
    GOOGLE
    CREDENTIALS
}

model Community {
    community_id String   @id @default(uuid())
    name         String   @unique
    description  String?
    created_at   DateTime @default(now())
    uid          String   @unique

    user   User    @relation(fields: [uid], references: [uid])
    events Event[]

    @@map("communities") // Rename the table to communities
}

model Event {
    event_id     String   @id @default(uuid())
    title        String
    description  String?
    date         DateTime
    location     String
    uid          String?
    community_id String?

    user       User?      @relation(fields: [uid], references: [uid])
    community  Community? @relation(fields: [community_id], references: [community_id])
    tickets    Ticket[]
    categories Category[]

    @@map("events") // Rename the table to events
}

model Ticket {
    ticket_id     String   @id @default(uuid())
    event_id      String
    uid           String
    purchase_date DateTime @default(now())
    status        String

    event Event @relation(fields: [event_id], references: [event_id])
    user  User  @relation(fields: [uid], references: [uid])

    @@map("tickets") // Rename the table to tickets
}

model Payment {
    payment_id   String   @id @default(uuid())
    uid          String
    amount       Float
    currency     String
    status       String
    billing_date DateTime

    user User @relation(fields: [uid], references: [uid])

    @@map("payments") // Rename the table to payments
}

model Category {
    category_id String @id @default(uuid())
    name        String @unique
    event_id    String

    event Event @relation(fields: [event_id], references: [event_id])

    @@map("categories") // Rename the table to categories
}

model Tag {
    tag_id String @id @default(uuid())
    fields Json

    @@map("tags") // Rename the table to tags
}
